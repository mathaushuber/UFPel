PARSER_BEGIN(Karloff)
import java.io.*;
public class Karloff {

  public static void main(String args[]) throws ParseException,IOException {
    
 Karloff analisador = new Karloff(new FileInputStream(args[0]));
 analisador.Karloff();
  }

}

PARSER_END(Karloff)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <VOID: "void">
| <NEWVAR: "newVar">
| <WFUNC: "func">

| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <ACOLCHETES: "[">
| <FCOLCHETES: "]">

| <SEMICOLON: ";">

| <TINT: "integer">
| <TBOOL: "bool">

| <CIF: "if">
| <CTHEN: "then">
| <CWHILE: "while">
| <CREPEAT: "repeat">
| <CUNTIL: "until">
| <CRETURN: "return">
| <CATRIB: "=">
| <CSOUT: "System.output">
| <CSRINT: "System.readint">

| <OPADD: "+">
| <OPSUB: "-">
| <OPMULT: "*">
| <OPDIV: "/">
| <OPAND: "&">
| <OPOR: "|">
| <OPLESSTHAN: "<">
| <OPGREATERTHAN: ">">
| <OPEQUAL: "==">
}

TOKEN :
{
  <NUM : (["0"-"9"])+>
 |< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])*>
 |< FUNC: <WFUNC> >

}



void Karloff () :
{Token t;}
{

(
  <MAIN> { System.out.println("Palavra reservada: main");}
| <VOID> { System.out.println("Palavra reservada: void");}
| <NEWVAR> { System.out.println("Palavra reservada: newVar");}
| <WFUNC> { System.out.println("Palavra reservada: func");}

| <ACHAVES> { System.out.println("Abre chaves: {");}
| <FCHAVES> { System.out.println("Fecha chaves: }");}
| <ACOLCHETES> { System.out.println("Abre colchetes: [");}
| <FCOLCHETES> { System.out.println("Abre colchetes: ]");}
| <APARENTESES> { System.out.println("Abre parenteses: (");}
| <FPARENTESES> { System.out.println("Fecha parenteses: )");}

| <SEMICOLON> { System.out.println("Ponto e vírgula: ;");}

| <TINT> { System.out.println("Tipo: integer");}
| <TBOOL> { System.out.println("Tipo: bool");}

| <CIF> { System.out.println("Comando: if");}
| <CTHEN> { System.out.println("Comando: then");}
| <CWHILE> { System.out.println("Comando: while");}
| <CREPEAT> { System.out.println("Comando: repeat");}
| <CUNTIL> { System.out.println("Comando: until");}
| <CRETURN> { System.out.println("Comando: return");}
| <CATRIB> { System.out.println("Comando de atribuição: =");}
| <CSOUT> { System.out.println("Comando: System.output");}
| <CSRINT> { System.out.println("Comando: System.readint");}

| <OPADD> { System.out.println("Operação: +");}
| <OPSUB> { System.out.println("Operação: -");}
| <OPMULT> { System.out.println("Operação: *");}
| <OPDIV> { System.out.println("Operação: /");}
| <OPAND> { System.out.println("Operação: &");}
| <OPOR> { System.out.println("Operação: |");}
| <OPLESSTHAN> { System.out.println("Operação: <");}
| <OPGREATERTHAN> { System.out.println("Operação: >");}
| <OPEQUAL> { System.out.println("Operação: ==");}

| t=<NUM> { System.out.println("Número: "+ t.image);}
| t=<ID> { System.out.println("Identificador: "+ t.image);}
)*
<EOF> 


}